import React, { useState, useRef, useEffect, useMemo } from 'react';
import { Send, Bot, User, Calendar, Clock, Building2, BookOpen, Users, CheckCircle, AlertCircle } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import { format, addWeeks, parse, isValid } from 'date-fns';
import { ptBR } from 'date-fns/locale';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  data?: any;
}

interface SchedulingData {
  professor?: string;
  materia?: string;
  bloco?: string;
  sala?: string;
  horario?: string;
  data?: string;
  semanas?: number;
  duracao?: string;
  diaSemana?: string;
}

export const AISchedulingChat = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: 'Ol√°! Sou o Luciano, seu assistente inteligente de agendamentos do PRAGMA.\n\nüéØ Para criar um agendamento, me informe:\n‚Ä¢ Nome do professor (Prof. Jo√£o, Professor Ana, etc.)\n‚Ä¢ Disciplina (C√°lculo, F√≠sica, Programa√ß√£o, etc.)\n‚Ä¢ Bloco (C, H15, H06, H03, A, B, D, E, F, G)\n‚Ä¢ Dia da semana (segunda, ter√ßa, quarta, quinta, sexta)\n‚Ä¢ Hor√°rio (08:00, 14:00, etc.)\n‚Ä¢ N√∫mero de semanas (opcional, padr√£o: 16)\n\nüí° Exemplos de comandos:\n"Prof. Jo√£o Silva vai dar C√°lculo I no Bloco C, segunda-feira √†s 08:00, 16 semanas"\n"Professor Ana, F√≠sica, H15, ter√ßa 14:00"\n"Carlos Oliveira, Programa√ß√£o, Bloco A, quinta √†s 10:00"\n\nü§ñ Sou muito inteligente e entendo v√°rias formas de voc√™ falar!',
      content: 'üëã Ol√°! Sou o Luciano, seu assistente ultra-inteligente!\n\nüöÄ **MODO R√ÅPIDO ATIVADO** - Entendo voc√™ de qualquer jeito!\n\nüí° **Exemplos super simples:**\n‚Ä¢ "Jo√£o, C√°lculo, C, segunda 8h"\n‚Ä¢ "Prof Ana, F√≠sica, H15, ter√ßa 14h, 20 semanas"\n‚Ä¢ "Carlos vai dar Programa√ß√£o quinta √†s 10h"\n\n‚ú® **Sou MUITO inteligente:**\n‚Ä¢ Entendo portugu√™s natural\n‚Ä¢ Corrijo pequenos erros\n‚Ä¢ Resposta em segundos\n‚Ä¢ Reconhe√ßo 50+ disciplinas\n\nüéØ **Fale do seu jeito que eu entendo!**',
      timestamp: new Date()
    }
  ]);
  
  const [inputMessage, setInputMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [schedulingData, setSchedulingData] = useState<SchedulingData>({});
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const { blocks, rooms, addSemesterReservations, addReservation } = useStore();

  // Otimiza√ß√£o: usar apenas primeiras 100 salas de cada bloco para performance
  const optimizedRooms = useMemo(() => {
    const roomsByBlock = new Map<string, any[]>();
    blocks.forEach(block => {
      const blockRooms = rooms.filter(r => r.block_id === block.id).slice(0, 100);
      roomsByBlock.set(block.id, blockRooms);
    });
    return roomsByBlock;
  }, [blocks, rooms]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Hor√°rios predefinidos da faculdade
  const timeSlots = [
    { start: '07:10', end: '08:00' },
    { start: '08:00', end: '08:50' },
    { start: '08:50', end: '09:40' },
    { start: '09:55', end: '10:45' },
    { start: '10:45', end: '11:35' },
    { start: '11:35', end: '12:25' },
    { start: '13:15', end: '14:05' },
    { start: '14:05', end: '14:55' },
    { start: '15:10', end: '16:00' },
    { start: '16:00', end: '16:50' },
    { start: '16:50', end: '17:40' },
    { start: '18:30', end: '19:20' },
    { start: '19:20', end: '20:05' },
    { start: '20:05', end: '20:50' },
    { start: '21:05', end: '21:50' }
  ];

  // Mapeamento inteligente de dias da semana
  const diasSemana = {
    'segunda': 1, 'segunda-feira': 1, 'seg': 1, '2': 1, 'segunda feira': 1,
    'ter√ßa': 2, 'ter√ßa-feira': 2, 'ter': 2, 'terca': 2, '3': 2, 'ter√ßa feira': 2, 'terca-feira': 2,
    'quarta': 3, 'quarta-feira': 3, 'qua': 3, '4': 3, 'quarta feira': 3,
    'quinta': 4, 'quinta-feira': 4, 'qui': 4, '5': 4, 'quinta feira': 4,
    'sexta': 5, 'sexta-feira': 5, 'sex': 5, '6': 5, 'sexta feira': 5
  };

  // Lista expandida de disciplinas para reconhecimento inteligente
  const disciplinasComuns = [
    'c√°lculo', 'calculo', 'matem√°tica', 'matematica', '√°lgebra', 'algebra',
    'f√≠sica', 'fisica', 'qu√≠mica', 'quimica', 'biologia', 'geografia', 'hist√≥ria', 'historia',
    'programa√ß√£o', 'programacao', 'inform√°tica', 'informatica', 'computa√ß√£o', 'computacao',
    'estruturas de dados', 'banco de dados', 'redes', 'sistemas operacionais',
    'engenharia de software', 'intelig√™ncia artificial', 'inteligencia artificial',
    'estat√≠stica', 'estatistica', 'probabilidade', 'metodologia', 'pesquisa',
    'portugu√™s', 'portugues', 'ingl√™s', 'ingles', 'espanhol', 'literatura',
    'administra√ß√£o', 'administracao', 'gest√£o', 'gestao', 'marketing', 'economia',
    'contabilidade', 'direito', 'psicologia', 'sociologia', 'filosofia',
    'educa√ß√£o f√≠sica', 'educacao fisica', 'artes', 'm√∫sica', 'musica',
    'eletr√¥nica', 'eletronica', 'mec√¢nica', 'mecanica', 'civil', 'el√©trica', 'eletrica'
  ];

  // Padr√µes de nomes de professores
  const padroesProfessor = [
    /prof\.?\s*([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)(?:\s*[,.]|\s*vai|\s*dar√°|\s*ensina|\s*de|\s*da|\s*do|\s*no|\s*na|\s*em|\s*$)/i,
    /professor[a]?\s+([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)(?:\s*[,.]|\s*vai|\s*dar√°|\s*ensina|\s*de|\s*da|\s*do|\s*no|\s*na|\s*em|\s*$)/i,
    /([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)\s*(?:vai dar|dar√°|ensina|leciona)/i,
    /^([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)\s*[,]/i
  ];

  const findBestTimeSlot = (timeInput: string) => {
    const hour = parseInt(timeInput.split(':')[0]);
    return timeSlots.find(slot => {
      const slotHour = parseInt(slot.start.split(':')[0]);
      return Math.abs(slotHour - hour) <= 1;
    }) || timeSlots[0];
  };

  const getNextDateForWeekday = (weekday: number) => {
    const today = new Date();
    const daysUntilNext = (weekday - today.getDay() + 7) % 7 || 7;
    const nextDate = new Date(today);
    nextDate.setDate(today.getDate() + daysUntilNext);
    return nextDate;
  };

  // Fun√ß√£o inteligente para extrair informa√ß√µes
  const extractInformation = (message: string, currentData: SchedulingData) => {
    const lowerMessage = message.toLowerCase();
    const newData = { ...currentData };

    // 1. PROFESSOR - M√∫ltiplos padr√µes
    if (!newData.professor) {
      for (const pattern of padroesProfessor) {
        const match = message.match(pattern);
        if (match && match[1]) {
          let profName = match[1].trim();
          // Limpar caracteres extras
          profName = profName.replace(/[,.]$/, '');
          if (profName.length > 2 && !disciplinasComuns.includes(profName.toLowerCase())) {
            newData.professor = profName.startsWith('Prof') ? profName : `Prof. ${profName}`;
            break;
          }
        }
      }
    }

    // 2. DISCIPLINA - Busca inteligente
    if (!newData.materia) {
      // Primeiro, procurar disciplinas conhecidas
      for (const disciplina of disciplinasComuns) {
        if (lowerMessage.includes(disciplina)) {
          newData.materia = disciplina.charAt(0).toUpperCase() + disciplina.slice(1);
          break;
        }
      }
      
      // Se n√£o encontrou, tentar padr√µes contextuais
      if (!newData.materia) {
        const materiaPatterns = [
          /(?:de|da|do|disciplina|mat√©ria|aula)\s+([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)(?:\s*[,.]|\s*no|\s*na|\s*em|\s*bloco|\s*$)/i,
          /(?:vai dar|dar√°|ensina|leciona)\s+([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)(?:\s*[,.]|\s*no|\s*na|\s*em|\s*bloco|\s*$)/i,
          /([a-z√°√™√ß√µ√†√©√≠√≥√∫√¢√¥√£√ß\s]+?)\s*(?:no bloco|na sala|em)/i
        ];
        
        for (const pattern of materiaPatterns) {
          const match = message.match(pattern);
          if (match && match[1]) {
            const materia = match[1].trim();
            if (materia.length > 3 && !materia.includes('bloco') && !materia.includes('sala')) {
              newData.materia = materia.charAt(0).toUpperCase() + materia.slice(1);
              break;
            }
          }
        }
      }
    }

    // 3. BLOCO - Reconhecimento inteligente
    if (!newData.bloco) {
      const blocoPatterns = [
        /bloco\s*([a-z]\d*|[a-z]|h\d+)/i,
        /\b([a-z]\d+|h\d+)\b/i,
        /\b(bloco\s*)?([a-z])\b(?!\w)/i
      ];
      
      for (const pattern of blocoPatterns) {
        const match = message.match(pattern);
        if (match) {
          let blocoName = (match[2] || match[1]).toUpperCase();
          const foundBlock = blocks.find(b => 
            b.name.toUpperCase().includes(blocoName) || 
            b.name.toUpperCase() === blocoName ||
            b.name.toUpperCase() === `BLOCO ${blocoName}`
          );
          if (foundBlock) {
            newData.bloco = foundBlock.id;
            break;
          }
        }
      }
    }

    // 4. HOR√ÅRIO - M√∫ltiplos formatos
    if (!newData.horario) {
      const horarioPatterns = [
        /(\d{1,2}):(\d{2})/,
        /(\d{1,2})h(\d{2})?/,
        /√†s?\s*(\d{1,2}):?(\d{2})?/i,
        /(\d{1,2})\s*horas?/i,
        /(\d{1,2})\s*da\s*(manh√£|tarde|noite)/i
      ];
      
      for (const pattern of horarioPatterns) {
        const match = message.match(pattern);
        if (match) {
          let hour = match[1];
          let minute = match[2] || '00';
          
          // Ajustar formato
          hour = hour.padStart(2, '0');
          minute = minute.padStart(2, '0');
          
          const timeString = `${hour}:${minute}`;
          const matchingSlot = findBestTimeSlot(timeString);
          if (matchingSlot) {
            newData.horario = matchingSlot.start;
            newData.duracao = matchingSlot.end;
            break;
          }
        }
      }
    }

    // 5. DIA DA SEMANA - Reconhecimento flex√≠vel
    if (!newData.data) {
      for (const [dia, numero] of Object.entries(diasSemana)) {
        if (lowerMessage.includes(dia)) {
          const proximaData = getNextDateForWeekday(numero);
          newData.data = format(proximaData, 'yyyy-MM-dd');
          newData.diaSemana = dia;
          break;
        }
      }
    }

    // 6. SEMANAS - N√∫meros por extenso e d√≠gitos
    if (!newData.semanas) {
      const semanasPatterns = [
        /(\d+)\s*semanas?/i,
        /(um|uma|dois|duas|tr√™s|tres|quatro|cinco|seis|sete|oito|nove|dez|onze|doze|treze|catorze|quinze|dezesseis|dezessete|dezoito|dezenove|vinte)\s*semanas?/i
      ];
      
      for (const pattern of semanasPatterns) {
        const match = message.match(pattern);
        if (match) {
          if (match[1].match(/\d+/)) {
            newData.semanas = parseInt(match[1]);
          } else {
            // Converter n√∫meros por extenso
            const numerosExtenso: { [key: string]: number } = {
              'um': 1, 'uma': 1, 'dois': 2, 'duas': 2, 'tr√™s': 3, 'tres': 3,
              'quatro': 4, 'cinco': 5, 'seis': 6, 'sete': 7, 'oito': 8,
              'nove': 9, 'dez': 10, 'onze': 11, 'doze': 12, 'treze': 13,
              'catorze': 14, 'quinze': 15, 'dezesseis': 16, 'dezessete': 17,
              'dezoito': 18, 'dezenove': 19, 'vinte': 20
            };
            newData.semanas = numerosExtenso[match[1].toLowerCase()] || 16;
          }
          break;
        }
      }
    }

    return newData;
  };

  const processMessage = async (message: string) => {
    setIsProcessing(true);
    
    try {
      await new Promise(resolve => setTimeout(resolve, 400));
      
      const lowerMessage = message.toLowerCase();
      let response = '';
      let newSchedulingData = { ...schedulingData };

      // Verificar se √© confirma√ß√£o ou cancelamento
      if (lowerMessage.includes('confirmar') || lowerMessage.includes('sim') || lowerMessage.includes('ok') || lowerMessage.includes('confirma')) {
        const hasAllInfo = newSchedulingData.professor && 
                          newSchedulingData.materia && 
                          newSchedulingData.bloco && 
                          newSchedulingData.horario && 
                          newSchedulingData.data;

        if (hasAllInfo) {
          try {
            const blockRooms = optimizedRooms.get(newSchedulingData.bloco!) || [];
            if (blockRooms.length === 0) {
              response = '‚ùå N√£o h√° salas dispon√≠veis no bloco selecionado.\n\nPor favor, escolha outro bloco (C, H15, H06, H03, A, B, D, E, F, G).';
            } else {
              const selectedRoom = newSchedulingData.sala 
                ? blockRooms.find(r => r.id === newSchedulingData.sala) || blockRooms[0]
                : blockRooms[0];
              
              const startDate = new Date(newSchedulingData.data!);
              const [startHour, startMinute] = newSchedulingData.horario!.split(':').map(Number);
              const [endHour, endMinute] = newSchedulingData.duracao!.split(':').map(Number);
              
              startDate.setHours(startHour, startMinute, 0, 0);
              const endDate = new Date(startDate);
              endDate.setHours(endHour, endMinute, 0, 0);
              
              const reservation = {
                room_id: selectedRoom.id,
                teacher_name: newSchedulingData.professor!,
                start_time: startDate.toISOString(),
                end_time: endDate.toISOString(),
                purpose: newSchedulingData.materia!
              };
              
              const weeks = newSchedulingData.semanas || 16;
              
              await addSemesterReservations(reservation, weeks);
              
              const blockName = blocks.find(b => b.id === newSchedulingData.bloco)?.name;
              
              response = `‚úÖ Agendamento criado com sucesso!\n\n`;
              response += `üë®‚Äçüè´ Professor: ${newSchedulingData.professor}\n`;
              response += `üìö Disciplina: ${newSchedulingData.materia}\n`;
              response += `üè¢ Local: ${blockName} - ${selectedRoom.name}\n`;
              response += `‚è∞ Hor√°rio: ${newSchedulingData.horario} - ${newSchedulingData.duracao}\n`;
              response += `üìÖ In√≠cio: ${format(startDate, 'dd/MM/yyyy')}\n`;
              response += `üìä Total: ${weeks} aulas agendadas\n\n`;
              response += `üéâ Posso ajudar com mais algum agendamento?`;
              
              newSchedulingData = {};
            }
          } catch (error) {
            console.error('Erro ao criar agendamento:', error);
            response = '‚ùå Erro ao criar o agendamento.\n\nTente novamente ou verifique os dados informados.';
          }
        } else {
          response = '‚ö†Ô∏è Informa√ß√µes incompletas para confirmar.\n\nPreciso de todos os dados antes de criar o agendamento.';
        }
      } else if (lowerMessage.includes('cancelar') || lowerMessage.includes('n√£o') || lowerMessage.includes('nao') || lowerMessage.includes('desistir')) {
        newSchedulingData = {};
        response = '‚ùå Agendamento cancelado.\n\nüòä Posso ajudar com um novo agendamento?';
      } else {
        // Extrair informa√ß√µes da mensagem usando IA melhorada
        newSchedulingData = extractInformation(message, newSchedulingData);

        // Verificar se temos todas as informa√ß√µes necess√°rias
        const hasAllInfo = newSchedulingData.professor && 
                          newSchedulingData.materia && 
                          newSchedulingData.bloco && 
                          newSchedulingData.horario && 
                          newSchedulingData.data;

        if (hasAllInfo) {
          const blockName = blocks.find(b => b.id === newSchedulingData.bloco)?.name;
          const semanas = newSchedulingData.semanas || 16;
          
          response = 'üéØ Perfeito! Coletei todas as informa√ß√µes:\n\n';
          response += `üë®‚Äçüè´ Professor: ${newSchedulingData.professor}\n`;
          response += `üìö Disciplina: ${newSchedulingData.materia}\n`;
          response += `üè¢ Bloco: ${blockName}\n`;
          response += `‚è∞ Hor√°rio: ${newSchedulingData.horario} - ${newSchedulingData.duracao}\n`;
          response += `üìÖ In√≠cio: ${format(new Date(newSchedulingData.data), 'dd/MM/yyyy')} (${newSchedulingData.diaSemana})\n`;
          response += `üìä Dura√ß√£o: ${semanas} semanas\n\n`;
          response += '‚úÖ Digite "confirmar" para criar os agendamentos ou "cancelar" para desistir.';
        } else {
          // Solicitar informa√ß√µes faltantes de forma inteligente
          const missing = [];
          if (!newSchedulingData.professor) missing.push('üë®‚Äçüè´ Nome do professor');
          if (!newSchedulingData.materia) missing.push('üìö Disciplina');
          if (!newSchedulingData.bloco) missing.push('üè¢ Bloco');
          if (!newSchedulingData.horario) missing.push('‚è∞ Hor√°rio');
          if (!newSchedulingData.data) missing.push('üìÖ Dia da semana');
          
          if (missing.length > 0) {
            response = 'ü§î Ainda preciso de algumas informa√ß√µes:\n\n';
            response += missing.map(item => `‚Ä¢ ${item}`).join('\n');
            response += '\n\nüí° Exemplo completo:\n';
            response += '"Prof. Ana Silva vai dar C√°lculo I no Bloco C, segunda-feira √†s 08:00, 16 semanas"';
            
            // Dar dicas espec√≠ficas baseadas no que j√° foi coletado
            if (newSchedulingData.professor && !newSchedulingData.materia) {
              response += '\n\nüéØ J√° tenho o professor! Agora me diga qual disciplina ele vai ensinar.';
            } else if (newSchedulingData.materia && !newSchedulingData.bloco) {
              response += '\n\nüéØ √ìtimo! Agora preciso saber em qual bloco (C, H15, H06, H03, A, B, D, E, F, G).';
            }
          }
        }
      }

      setSchedulingData(newSchedulingData);
      
      const aiMessage: Message = {
        id: Date.now().toString(),
        type: 'ai',
        content: response,
        timestamp: new Date(),
        data: newSchedulingData
      };
      
      setMessages(prev => [...prev, aiMessage]);
    } catch (error) {
      console.error('Erro no processamento:', error);
      const errorMessage: Message = {
        id: Date.now().toString(),
        type: 'ai',
        content: '‚ùå Erro no processamento da solicita√ß√£o.\n\nüîÑ Tente novamente com um comando mais simples.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isProcessing) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const messageToProcess = inputMessage;
    setInputMessage('');
    
    await processMessage(messageToProcess);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden h-[700px] flex flex-col">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 border-b border-gray-200 p-4">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
            <Bot className="w-5 h-5 text-white" />
          </div>
          <div>
            <h2 className="font-semibold text-gray-900">Luciano (LU) - IA Inteligente</h2>
            <p className="text-sm text-gray-500">Assistente de Agendamentos com IA Avan√ßada</p>
          </div>
          <div className="ml-auto">
            <div className="flex items-center gap-1">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-xs text-green-600 font-medium">Online</span>
            </div>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
        <AnimatePresence>
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`max-w-[75%] rounded-lg p-3 shadow-sm ${
                message.type === 'user' 
                  ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white' 
                  : 'bg-white text-gray-800 border border-gray-200'
              }`}>
                <div className="whitespace-pre-wrap text-sm leading-relaxed">
                  {message.content}
                </div>
                <div className={`text-xs mt-2 ${
                  message.type === 'user' ? 'text-blue-100' : 'text-gray-400'
                }`}>
                  {format(message.timestamp, 'HH:mm')}
                </div>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>

        {isProcessing && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex justify-start"
          >
            <div className="bg-white rounded-lg p-3 shadow-sm border border-gray-200">
              <div className="flex items-center gap-2">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
                <span className="text-sm text-gray-500">Luciano est√° pensando...</span>
              </div>
            </div>
          </motion.div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="border-t border-gray-200 p-4 bg-white">
        <div className="flex gap-3 items-end">
          <div className="flex-1">
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Digite sua mensagem para o Luciano..."
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none resize-none"
              rows={1}
              disabled={isProcessing}
              style={{ minHeight: '44px', maxHeight: '120px' }}
              onInput={(e) => {
                const target = e.target as HTMLTextAreaElement;
                target.style.height = 'auto';
                target.style.height = Math.min(target.scrollHeight, 120) + 'px';
              }}
            />
          </div>
          <button
            onClick={handleSendMessage}
            disabled={!inputMessage.trim() || isProcessing}
            className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-3 rounded-lg hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex-shrink-0"
          >
            <Send className="w-5 h-5" />
          </button>
        </div>
        
        <div className="flex items-center gap-4 mt-2 text-xs text-gray-400">
          <span>üè¢ Blocos: C, H15, H06, H03, A, B, D, E, F, G</span>
          <span>‚Ä¢</span>
          <span>‚è∞ Hor√°rios: 07:10-21:50</span>
          <span>‚Ä¢</span>
          <span>üìä Padr√£o: 16 semanas</span>
        </div>
      </div>
    </div>
  );
};